#!/usr/bin/env python

names = [
    "gps_raw_int",
    "raw_imu",
    "scaled_imu",
    "raw_pressure",
    "scaled_pressure",
    "sys_status",
    "vfr_hud",
    "global_position_int",
    "attitude",
    "heartbeat",
    "param_value",
    "statustext",
    ]

def head(f):
    f.write("""
#include "logger_mavencoder.h"

""")


def foot(f,  arr):
    f.write("""  default:
    chDbgPanic("ID not handled");
    break;
  }
  return len;
}
""")

func_header = """
/*
 *******************************************************************************
 * EXPORTED FUNCTIONS
 *******************************************************************************
 */
/**
 * Autogenerated helper function.
 * Chose proper packing function based on the message type.
 */
uint16_t mavencoder(uint8_t msg_id, uint8_t system_id, uint8_t *threadsafe_buf, mavlink_message_t* msg){
  uint16_t len = 0;

  switch (msg_id){
"""

def gen(arr):
    f = open("./src/storage/logger_mavencoder.c", 'w')
    #f = open(".____link_packer.c", 'w')
    f.write("/* \n!!! Atomatically generated by\n" + __file__ + "\nDo not edit it manually. \n*/")
    head(f)

    for i in arr:
        f.write("extern mavlink_" + i + "_t mavlink_out_" + i + "_struct;\n")

    f.write(func_header)
    for i in arr:
        f.write("  case MAVLINK_MSG_ID_" + str.upper(i) + ":\n")
        f.write("    memcpy_ts(threadsafe_buf, &mavlink_out_" + i + "_struct, sizeof(mavlink_out_" + i +"_struct), 4);\n")
        f.write("    mavlink_msg_" + i + "_encode(system_id, MAV_COMP_ID_ALL, msg, (mavlink_" + i + "_t *)threadsafe_buf);\n")
        f.write("    break;\n\n")

    foot(f, arr)
    f.close()

# main
gen(names)
