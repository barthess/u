#include <math.h>

#include "main.h"
#include "sins.hpp"
#include "bkp.hpp"
#include "param_registry.hpp"

/*
 ******************************************************************************
 * DEFINES
 ******************************************************************************
 */

/*
 ******************************************************************************
 * EXTERNS
 ******************************************************************************
 */
extern ParamRegistry param_registry;

/*
 ******************************************************************************
 * PROTOTYPES
 ******************************************************************************
 */

/*
 ******************************************************************************
 * GLOBAL VARIABLES
 ******************************************************************************
 */

/*
 ******************************************************************************
 ******************************************************************************
 * LOCAL FUNCTIONS
 ******************************************************************************
 ******************************************************************************
 */

/*
 ******************************************************************************
 * EXPORTED FUNCTIONS
 ******************************************************************************
 */

/**
 *
 */
SINS::SINS(StateVector *in){
  this->in = in;
}

/**
 *
 */
void SINS::start(void){
  prev_odo = bkpOdometer;
  this->pulse2m = (const float*)param_registry.valueSearch("SPD_pulse2m");
  in->Xsins = 0;
  in->Ysins = 0;
};

/**
 *
 */
void SINS::update(void){
  float a;
  uint32_t dtrip;

  chSysLock();
  dtrip = bkpOdometer - prev_odo;
  prev_odo = bkpOdometer;
  chSysUnlock();

  if (0 == dtrip)
    return;
  else{
    a = (prev_hdg + in->psi) / 2;
    prev_hdg = in->psi;
    in->Ysins += dtrip * sinf(a) * *pulse2m;
    in->Xsins += dtrip * cosf(a) * *pulse2m;
  }
};

/**
 *
 */
void SINS::reset(void){
  in->Ysins = 0;
  in->Xsins = 0;
}







