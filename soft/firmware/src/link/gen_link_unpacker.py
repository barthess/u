#!/usr/bin/env python

names = {
        "Dm" : ["command_long", "param_request_read", "param_request_list", "param_set", "oblique_storage_request_dm", "oblique_storage_request_count_dm", "heartbeat_dm"],
        "Cc" : ["command_long", "param_request_read", "param_request_list", "param_set", "oblique_storage_request_cc", "oblique_storage_request_count_cc", "heartbeat_cc", "statustext", "oblique_agps"]
        }


head = """
#include "ch.h"
#include "hal.h"
#include "mavlink.h"

#include "link.h"
#include "message.h"
#include "main.h"

extern GlobalFlags_t GlobalFlags;
extern mavlink_system_t                   mavlink_system_struct;
"""

foot = """
      default:
        break;
      }
    }
  }
}"""

dmfunchead = """

/**
 *
 */
void DmUnpackCycle(SerialDriver *sdp){
  mavlink_message_t msg;
  mavlink_status_t status;
  msg_t c = 0;
  msg_t prev_c = 0;

  while(GlobalFlags.messaging_ready == 0)
    chThdSleepMilliseconds(50);

  while (!chThdShouldTerminate()) {
    if (!dm_port_ready()){
      chThdSleepMilliseconds(50);
      continue;
    }
    else{
      (void)prev_c;
      c = sdGetTimeout((SerialDriver *)sdp, MS2ST(50));
      if (c == Q_TIMEOUT)
        continue;
    }

    if (mavlink_parse_char(MAVLINK_COMM_0, (uint8_t)c, &msg, &status)) {
      switch(msg.msgid){
"""

ccfunchead = """
/**
 *
 */
void CcUnpackCycle(SerialDriver *sdp){
  mavlink_message_t msg;
  mavlink_status_t status;
  msg_t c = 0;
  msg_t prev_c = 0;

  while (!chThdShouldTerminate()) {
    if (!cc_port_ready()){
      chThdSleepMilliseconds(50);
      continue;
    }
    else{
      /* Try to get an escaped with DLE symbols message */
      c = sdGetTimeout((SerialDriver *)sdp, MS2ST(50));
      if (c == Q_TIMEOUT)
        continue;
      prev_c = c;
      if (prev_c == DLE){
        prev_c = 0; /* set it to any just not DLE nor ETX */
        c = sdGetTimeout((SerialDriver *)sdp, MS2ST(50));
        if (c == Q_TIMEOUT)
          continue;
      }
    }

    if (mavlink_parse_char(MAVLINK_COMM_0, (uint8_t)c, &msg, &status)) {
      switch(msg.msgid){
"""

def printcase(f, i):
    f.write("        case MAVLINK_MSG_ID_" + str.upper(i) + ":\n")
    f.write("          mavlink_msg_" + i + "_decode(&msg, &mavlink_" + i + "_struct);\n")
    if (i[:-3] == "heartbeat") or (i == "statustext"):
        f.write("//")
    f.write("          if (mavlink_" + i + "_struct.target_system == mavlink_system_struct.sysid)\n")
    f.write("            chEvtBroadcastFlags(&event_mavlink_" + i + ", EVMSK_MAVLINK_" + str.upper(i) + ");\n")
    f.write("          break;\n\n")


def gen(name, arr):
    f = open("./src/link/link_" + str.lower(name) + "_unpacker.c", 'w')
    # f = open("./____link_" + str.lower(name) + "_unpacker.c", 'w')
    f.write("/* \n!!! Atomatically generated by\n" + __file__ + "\nDo not edit it manually. \n*/")
    f.write(head)
    f.write("\n#include \"link_" + str.lower(name) + ".h\"\n\n")

    for i in arr:
        f.write("extern mavlink_" + i + "_t mavlink_" + i + "_struct;\n")
    f.write("\n")

    for i in arr:
        f.write("extern EventSource event_mavlink_" + i + ";\n")
    f.write("\n")

    if (name == "Dm"):
        f.write(dmfunchead)
    else:
        f.write(ccfunchead)

    for i in arr:
        printcase(f, i)

    f.write(foot)
    f.close()

for key in names.keys():
    gen(key, names[key])
