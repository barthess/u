#!/usr/bin/env python

names = [
    ["raw_imu", "raw_imu"],
    ["scal_imu", "scaled_imu"],
    ["raw_press", "raw_pressure"],
    ["sys_status", "sys_status"],
    ["gps_int", "global_position_int"],
    ["attitude", "attitude"],
    ["scal_press", "scaled_pressure"],
    ["vfr_hud", "vfr_hud"],
]

head = """
#include "uav.h"
#include "global_flags.h"
#include "message.hpp"
#include "param_registry.hpp"
/*
 ******************************************************************************
 * DEFINES
 ******************************************************************************
 */
"""

foot = """
/*
 *******************************************************************************
 * EXPORTED FUNCTIONS
 *******************************************************************************
 */

/**
 *
 */
void TlmSenderInit(void){
  chThdCreateStatic(TlmSenderThreadWA,
          sizeof(TlmSenderThreadWA),
          LINK_THREADS_PRIO - 1,
          TlmSenderThread,
          NULL);
}
"""

externs_sep = """
/*
 ******************************************************************************
 * EXTERNS
 ******************************************************************************
 */
extern ParamRegistry param_registry;
"""

global_vars_sep = """
/*
 ******************************************************************************
 * GLOBAL VARIABLES
 ******************************************************************************
 */
"""

local_func_sep = """
/*
 *******************************************************************************
 *******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************
 *******************************************************************************
 */
"""

thd_head = """
/**
 * Listen events with new parameters
 * compare new values with old cached values
 * if changed - retune virtual timers
 */
static WORKING_AREA(TlmSenderThreadWA, 256);
static msg_t TlmSenderThread(void *arg) {
  chRegSetThreadName("TLM_Scheduler");
  (void)arg;

  while (!GlobalFlags.tlm_link_ready)
    chThdSleepMilliseconds(50);\n
"""

thd_foot = """
  chThdExit(0);
  return 0;
}
"""

def gen(names):
    f = open("./src/link/tlm_sender.cpp", 'w')
    #f = open("./____tlm_sender.c", 'w')
    f.write("/* \n!!! Atomatically generated by\n" + __file__ + "\nDo not edit it manually. \n*/")
    f.write(head)

    # defines
    for i in names:
        f.write("#define start_" +i[0]+ "_vt() {chVTSetI(&" +i[0]+ "_vt, MS2ST(*" +i[0]+ "), &" +i[0]+ "_vtcb, NULL);}\n")
    f.write("\n")

    # externs
    f.write(externs_sep)
    f.write("extern GlobalFlags_t GlobalFlags;\n\n")
    for i in names:
        f.write("extern EventSource event_mavlink_out_" +i[1]+ ";\n")
    f.write("\n")

    # global_vars
    f.write(global_vars_sep)
    for i in names:
        f.write("static uint32_t const *" +i[0]+ ";\n")
    f.write("\n")
    for i in names:
        f.write("static VirtualTimer " +i[0]+ "_vt;\n")
    f.write("\n")
    for i in names:
        f.write("static uint32_t " +i[0]+ "_cached = SEND_OFF;\n")
    f.write("\n")

    # local functions
    f.write(local_func_sep)
    for i in names:
        f.write("static void " +i[0]+ "_vtcb(void *par){\n")
        f.write("  (void)par;\n")
        f.write("  chSysLockFromIsr();\n")
        f.write("  chEvtBroadcastFlagsI(&event_mavlink_out_" +i[1]+ ", EVMSK_MAVLINK_OUT_" +str.upper(i[1])+ ");\n")
        f.write("  "+i[0]+"_cached = *"+i[0]+";\n")
        f.write("  if (*" +i[0]+ " != SEND_OFF) // self restarting only if sending for this parameter not disabled\n")
        f.write("    start_" +i[0]+ "_vt();\n")
        f.write("  chSysUnlockFromIsr();\n}\n\n")

    # thread
    f.write(thd_head)
    for i in names:
        f.write("  " +i[0]+ " = (const uint32_t*)param_registry.valueSearch(\"T_" +i[0]+ "\");\n")
    f.write("\n")

    # cycle
    f.write("  do{\n")
    for i in names:
        f.write("    if (("+i[0]+"_cached == SEND_OFF) && (*"+i[0]+" != SEND_OFF)){\n")
        f.write("      chSysLock();\n")
        f.write("      "+i[0]+"_cached = *"+i[0]+";\n")
        f.write("      start_"+i[0]+"_vt();\n")
        f.write("      chSysUnlock();\n")
        f.write("    }\n\n")

    f.write("    chThdSleepMilliseconds(100);\n")
    f.write("  }while (!chThdShouldTerminate());\n")
    f.write(thd_foot)

    # footer
    f.write(foot)
    f.close()

gen(names)
